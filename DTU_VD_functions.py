def prompt_config():    from getpass import getpass    config = {    'EMAIL': '',    'PASSWORD': ''    }        # Prompt for login details    config['EMAIL'] = input("Please enter your DTU email (xxx@dtu.dk or s123456@student.dtu.dk): ")    config['PASSWORD'] = getpass("Please enter your DTU password: ")        return configdef open_driver(config, login_url):    from sys import platform    from selenium import webdriver    from selenium.webdriver.common.keys import Keys    import time        # Specify window to not open    options = webdriver.ChromeOptions()    options.add_argument("headless")    if platform == "linux" or platform == "linux2" or platform == "darwin":        # If Linux or MacOS        driver = webdriver.Chrome('./chromedriver', options=options)    elif platform == "win32":        # Or if Windows        driver = webdriver.Chrome('./chromedriver.exe', options=options)    else:        raise Exception("Unknown operating system.")    driver.get(login_url)    assert 'Login - DTU - MediaSpace' in driver.title    elem = driver.find_element_by_name('Login[username]')    elem.clear()    elem.send_keys(config['EMAIL'])    elem = driver.find_element_by_name('Login[password]')    elem.clear()    elem.send_keys(config['PASSWORD'])    elem.send_keys(Keys.RETURN)    i = True    timer = 0    while i:        try:            expected_url = driver.current_url            actual_url = "https://video.dtu.dk/"            assert expected_url == actual_url            i = False            return driver        except AssertionError:            time.sleep(1)            timer += 1            if timer > 10:                raise TimeoutError()def read_category(driver,url):    driver.get(url)    print("Loading videos from category link...")    video_index = 1        import time    loading_more_media = True    multiple_videos = True    while loading_more_media:        driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")  # Scroll down        time.sleep(2)        try:               elem = driver.find_element_by_xpath('//*[@id="channelGallery"]/div/a')            elem.click()        except:  # Perhaps some error type here?            # No more media items to load. Scroll back to the top.            loading_more_media = False            driver.execute_script("window.scrollTo(0, 0);")            continue    # Now, we want to extract all of the URL from the gallery links.    video_urls = []    loading_more_media = True    while loading_more_media:        try:            elem = driver.find_element_by_xpath('//*[@id="gallery"]/li[' + str(video_index) + ']/div[1]/div[1]/div/p/a')            driver.execute_script("arguments[0].scrollIntoView()", elem)            link = elem.get_attribute('href')            video_urls.append(link)            video_index = video_index + 1        except:  # Perhaps some error type here?            # All links are fetched. Scroll back to top.            loading_more_media = False            driver.execute_script("window.scrollTo(0, 0);")            continue            return video_urlsdef download_videos(driver, urls, pathout=None):    from selenium import webdriver    from selenium.webdriver.common.keys import Keys    import json    import youtube_dl        if type(urls) is not list:        raise ValueError('urls should be a list.')        if pathout is None: pathout = [None]*len(urls)        if len(urls) > 1:        if input(f'Do you want to download {len(urls)} videos? This might take a while. [y/n] ').strip().lower() != 'y':            return            for url, title, idx in zip(urls, pathout, range(len(urls))):        #Load the url        driver.get(url)        driver.switch_to.frame(driver.find_element_by_css_selector('#kplayer_ifp'))                # Get the script        script = driver.find_element_by_css_selector('body script:nth-child(2)').get_attribute("innerHTML")        data = (script.splitlines()[2])[37:-1]        # Load the data into json format        js = json.loads(data)        dl_link = js["entryResult"]["meta"]["downloadUrl"]                if title is None:            #Load the name            title = js["entryResult"]["meta"]["name"]                    print(f'Download video {idx+1} out of {len(urls)}.')                # Download video        ydl_opts = {"outtmpl": title + ".mp4"}                with youtube_dl.YoutubeDL(ydl_opts) as ydl:            ydl.download([dl_link])                                                